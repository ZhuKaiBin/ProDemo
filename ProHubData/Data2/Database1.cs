// Licence file C:\Users\bob_zhu\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace ProHubData.Data2
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<OMS_HangFire_Counter> OMS_HangFire_Counters { get; set; } // Counter
        DbSet<OMS_HangFire_Hash> OMS_HangFire_Hashes { get; set; } // Hash
        DbSet<OMS_HangFire_Job> OMS_HangFire_Jobs { get; set; } // Job
        DbSet<OMS_HangFire_JobParameter> OMS_HangFire_JobParameters { get; set; } // JobParameter
        DbSet<OMS_HangFire_JobQueue> OMS_HangFire_JobQueues { get; set; } // JobQueue
        DbSet<OMS_HangFire_List> OMS_HangFire_Lists { get; set; } // List
        DbSet<OMS_HangFire_Schema> OMS_HangFire_Schemata { get; set; } // Schema
        DbSet<OMS_HangFire_Server> OMS_HangFire_Servers { get; set; } // Server
        DbSet<OMS_HangFire_Set> OMS_HangFire_Sets { get; set; } // Set
        DbSet<OMS_HangFire_State> OMS_HangFire_States { get; set; } // State

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int AddPage(string contentName);
        // AddPageAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(int? tablesToCheck);
        Task<AspnetAnyDataInTablesReturnModel> AspnetAnyDataInTablesAsync(int? tablesToCheck);

        int AspnetApplicationsCreateApplication(string applicationName, out Guid? applicationId);
        // AspnetApplicationsCreateApplicationAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetCheckSchemaVersion(string feature, string compatibleSchemaVersion);
        // AspnetCheckSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer);
        // AspnetMembershipChangePasswordQuestionAndAnswerAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipCreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, bool? isApproved, DateTime? currentTimeUtc, DateTime? createDate, int? uniqueEmail, int? passwordFormat, out Guid? userId);
        // AspnetMembershipCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipFindUsersByEmail(string applicationName, string emailToMatch, int? pageIndex, int? pageSize);
        // AspnetMembershipFindUsersByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int AspnetMembershipFindUsersByName(string applicationName, string userNameToMatch, int? pageIndex, int? pageSize);
        // AspnetMembershipFindUsersByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public DbSet<OMS_HangFire_Counter> OMS_HangFire_Counters { get; set; } // Counter
        public DbSet<OMS_HangFire_Hash> OMS_HangFire_Hashes { get; set; } // Hash
        public DbSet<OMS_HangFire_Job> OMS_HangFire_Jobs { get; set; } // Job
        public DbSet<OMS_HangFire_JobParameter> OMS_HangFire_JobParameters { get; set; } // JobParameter
        public DbSet<OMS_HangFire_JobQueue> OMS_HangFire_JobQueues { get; set; } // JobQueue
        public DbSet<OMS_HangFire_List> OMS_HangFire_Lists { get; set; } // List
        public DbSet<OMS_HangFire_Schema> OMS_HangFire_Schemata { get; set; } // Schema
        public DbSet<OMS_HangFire_Server> OMS_HangFire_Servers { get; set; } // Server
        public DbSet<OMS_HangFire_Set> OMS_HangFire_Sets { get; set; } // Set
        public DbSet<OMS_HangFire_State> OMS_HangFire_States { get; set; } // State

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        /// <inheritdoc />
        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        /// <inheritdoc />
        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public MyDbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public MyDbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyDbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new OMS_HangFire_CounterConfiguration());
            modelBuilder.Configurations.Add(new OMS_HangFire_HashConfiguration());
            modelBuilder.Configurations.Add(new OMS_HangFire_JobConfiguration());
            modelBuilder.Configurations.Add(new OMS_HangFire_JobParameterConfiguration());
            modelBuilder.Configurations.Add(new OMS_HangFire_JobQueueConfiguration());
            modelBuilder.Configurations.Add(new OMS_HangFire_ListConfiguration());
            modelBuilder.Configurations.Add(new OMS_HangFire_SchemaConfiguration());
            modelBuilder.Configurations.Add(new OMS_HangFire_ServerConfiguration());
            modelBuilder.Configurations.Add(new OMS_HangFire_SetConfiguration());
            modelBuilder.Configurations.Add(new OMS_HangFire_StateConfiguration());

            // Indexes
            modelBuilder.Entity<OMS_HangFire_Counter>()
                .Property(e => e.Key)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("CX_HangFire_Counter", 1))
                );

            modelBuilder.Entity<OMS_HangFire_Hash>()
                .Property(e => e.ExpireAt)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_HangFire_Hash_ExpireAt", 1))
                );

            modelBuilder.Entity<OMS_HangFire_Job>()
                .Property(e => e.StateName)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_HangFire_Job_StateName", 1))
                );

            modelBuilder.Entity<OMS_HangFire_Job>()
                .Property(e => e.ExpireAt)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_HangFire_Job_ExpireAt", 1))
                );

            modelBuilder.Entity<OMS_HangFire_List>()
                .Property(e => e.ExpireAt)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_HangFire_List_ExpireAt", 1))
                );

            modelBuilder.Entity<OMS_HangFire_Server>()
                .Property(e => e.LastHeartbeat)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_HangFire_Server_LastHeartbeat", 1))
                );

            modelBuilder.Entity<OMS_HangFire_Set>()
                .Property(e => e.Key)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_HangFire_Set_Score", 1))
                );

            modelBuilder.Entity<OMS_HangFire_Set>()
                .Property(e => e.Score)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_HangFire_Set_Score", 2))
                );

            modelBuilder.Entity<OMS_HangFire_Set>()
                .Property(e => e.ExpireAt)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_HangFire_Set_ExpireAt", 1))
                );

        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new OMS_HangFire_CounterConfiguration(schema));
            modelBuilder.Configurations.Add(new OMS_HangFire_HashConfiguration(schema));
            modelBuilder.Configurations.Add(new OMS_HangFire_JobConfiguration(schema));
            modelBuilder.Configurations.Add(new OMS_HangFire_JobParameterConfiguration(schema));
            modelBuilder.Configurations.Add(new OMS_HangFire_JobQueueConfiguration(schema));
            modelBuilder.Configurations.Add(new OMS_HangFire_ListConfiguration(schema));
            modelBuilder.Configurations.Add(new OMS_HangFire_SchemaConfiguration(schema));
            modelBuilder.Configurations.Add(new OMS_HangFire_ServerConfiguration(schema));
            modelBuilder.Configurations.Add(new OMS_HangFire_SetConfiguration(schema));
            modelBuilder.Configurations.Add(new OMS_HangFire_StateConfiguration(schema));

            return modelBuilder;
        }

        // Stored Procedures
        public int AddPage(string contentName)
        {
            var contentNameParam = new SqlParameter { ParameterName = "@ContentName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = contentName, Size = 100 };
            if (contentNameParam.Value == null)
                contentNameParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[AddPage] @ContentName", contentNameParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AddPageAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(int? tablesToCheck)
        {
            var tablesToCheckParam = new SqlParameter { ParameterName = "@TablesToCheck", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = tablesToCheck.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tablesToCheck.HasValue)
                tablesToCheckParam.Value = DBNull.Value;

            var procResultData = new AspnetAnyDataInTablesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_AnyDataInTables]";
            cmd.Parameters.Add(tablesToCheckParam);

            try
            {
                DbInterception.Dispatch.Connection.Open(Database.Connection, new DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel2>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet3 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel3>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet4 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel4>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet5 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel5>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet6 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel6>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet7 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel7>(reader).ToList();
                reader.Close();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }

            return procResultData;
        }

        public async Task<AspnetAnyDataInTablesReturnModel> AspnetAnyDataInTablesAsync(int? tablesToCheck)
        {
            var tablesToCheckParam = new SqlParameter { ParameterName = "@TablesToCheck", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = tablesToCheck.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!tablesToCheck.HasValue)
                tablesToCheckParam.Value = DBNull.Value;

            var procResultData = new AspnetAnyDataInTablesReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[aspnet_AnyDataInTables]";
            cmd.Parameters.Add(tablesToCheckParam);

            try
            {
                await DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new DbInterceptionContext(), new CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel2>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet3 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel3>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet4 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel4>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet5 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel5>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet6 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel6>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet7 = objectContext.Translate<AspnetAnyDataInTablesReturnModel.ResultSetModel7>(reader).ToList();
            }
            finally
            {
                DbInterception.Dispatch.Connection.Close(Database.Connection, new DbInterceptionContext());
            }
            return procResultData;
        }

        public int AspnetApplicationsCreateApplication(string applicationName, out Guid? applicationId)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var applicationIdParam = new SqlParameter { ParameterName = "@ApplicationId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Applications_CreateApplication] @ApplicationName, @ApplicationId OUTPUT", applicationNameParam, applicationIdParam, procResultParam);

            if (IsSqlParameterNull(applicationIdParam))
                applicationId = null;
            else
                applicationId = (Guid) applicationIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetApplicationsCreateApplicationAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetCheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParam = new SqlParameter { ParameterName = "@Feature", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = feature, Size = 128 };
            if (featureParam.Value == null)
                featureParam.Value = DBNull.Value;

            var compatibleSchemaVersionParam = new SqlParameter { ParameterName = "@CompatibleSchemaVersion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = compatibleSchemaVersion, Size = 128 };
            if (compatibleSchemaVersionParam.Value == null)
                compatibleSchemaVersionParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_CheckSchemaVersion] @Feature, @CompatibleSchemaVersion", featureParam, compatibleSchemaVersionParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetCheckSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = DBNull.Value;

            var newPasswordQuestionParam = new SqlParameter { ParameterName = "@NewPasswordQuestion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = newPasswordQuestion, Size = 256 };
            if (newPasswordQuestionParam.Value == null)
                newPasswordQuestionParam.Value = DBNull.Value;

            var newPasswordAnswerParam = new SqlParameter { ParameterName = "@NewPasswordAnswer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = newPasswordAnswer, Size = 128 };
            if (newPasswordAnswerParam.Value == null)
                newPasswordAnswerParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer] @ApplicationName, @UserName, @NewPasswordQuestion, @NewPasswordAnswer", applicationNameParam, userNameParam, newPasswordQuestionParam, newPasswordAnswerParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetMembershipChangePasswordQuestionAndAnswerAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipCreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, bool? isApproved, DateTime? currentTimeUtc, DateTime? createDate, int? uniqueEmail, int? passwordFormat, out Guid? userId)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var userNameParam = new SqlParameter { ParameterName = "@UserName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = userName, Size = 256 };
            if (userNameParam.Value == null)
                userNameParam.Value = DBNull.Value;

            var passwordParam = new SqlParameter { ParameterName = "@Password", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = password, Size = 128 };
            if (passwordParam.Value == null)
                passwordParam.Value = DBNull.Value;

            var passwordSaltParam = new SqlParameter { ParameterName = "@PasswordSalt", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = passwordSalt, Size = 128 };
            if (passwordSaltParam.Value == null)
                passwordSaltParam.Value = DBNull.Value;

            var emailParam = new SqlParameter { ParameterName = "@Email", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = email, Size = 256 };
            if (emailParam.Value == null)
                emailParam.Value = DBNull.Value;

            var passwordQuestionParam = new SqlParameter { ParameterName = "@PasswordQuestion", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = passwordQuestion, Size = 256 };
            if (passwordQuestionParam.Value == null)
                passwordQuestionParam.Value = DBNull.Value;

            var passwordAnswerParam = new SqlParameter { ParameterName = "@PasswordAnswer", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = passwordAnswer, Size = 128 };
            if (passwordAnswerParam.Value == null)
                passwordAnswerParam.Value = DBNull.Value;

            var isApprovedParam = new SqlParameter { ParameterName = "@IsApproved", SqlDbType = SqlDbType.Bit, Direction = ParameterDirection.Input, Value = isApproved.GetValueOrDefault() };
            if (!isApproved.HasValue)
                isApprovedParam.Value = DBNull.Value;

            var currentTimeUtcParam = new SqlParameter { ParameterName = "@CurrentTimeUtc", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = currentTimeUtc.GetValueOrDefault() };
            if (!currentTimeUtc.HasValue)
                currentTimeUtcParam.Value = DBNull.Value;

            var createDateParam = new SqlParameter { ParameterName = "@CreateDate", SqlDbType = SqlDbType.DateTime, Direction = ParameterDirection.Input, Value = createDate.GetValueOrDefault() };
            if (!createDate.HasValue)
                createDateParam.Value = DBNull.Value;

            var uniqueEmailParam = new SqlParameter { ParameterName = "@UniqueEmail", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = uniqueEmail.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!uniqueEmail.HasValue)
                uniqueEmailParam.Value = DBNull.Value;

            var passwordFormatParam = new SqlParameter { ParameterName = "@PasswordFormat", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = passwordFormat.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!passwordFormat.HasValue)
                passwordFormatParam.Value = DBNull.Value;

            var userIdParam = new SqlParameter { ParameterName = "@UserId", SqlDbType = SqlDbType.UniqueIdentifier, Direction = ParameterDirection.Output };
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_CreateUser] @ApplicationName, @UserName, @Password, @PasswordSalt, @Email, @PasswordQuestion, @PasswordAnswer, @IsApproved, @CurrentTimeUtc, @CreateDate, @UniqueEmail, @PasswordFormat, @UserId OUTPUT", applicationNameParam, userNameParam, passwordParam, passwordSaltParam, emailParam, passwordQuestionParam, passwordAnswerParam, isApprovedParam, currentTimeUtcParam, createDateParam, uniqueEmailParam, passwordFormatParam, userIdParam, procResultParam);

            if (IsSqlParameterNull(userIdParam))
                userId = null;
            else
                userId = (Guid) userIdParam.Value;

            return (int)procResultParam.Value;
        }

        // AspnetMembershipCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByEmail(string applicationName, string emailToMatch, int? pageIndex, int? pageSize)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var emailToMatchParam = new SqlParameter { ParameterName = "@EmailToMatch", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = emailToMatch, Size = 256 };
            if (emailToMatchParam.Value == null)
                emailToMatchParam.Value = DBNull.Value;

            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_FindUsersByEmail] @ApplicationName, @EmailToMatch, @PageIndex, @PageSize", applicationNameParam, emailToMatchParam, pageIndexParam, pageSizeParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetMembershipFindUsersByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByName(string applicationName, string userNameToMatch, int? pageIndex, int? pageSize)
        {
            var applicationNameParam = new SqlParameter { ParameterName = "@ApplicationName", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = applicationName, Size = 256 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = DBNull.Value;

            var userNameToMatchParam = new SqlParameter { ParameterName = "@UserNameToMatch", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = userNameToMatch, Size = 256 };
            if (userNameToMatchParam.Value == null)
                userNameToMatchParam.Value = DBNull.Value;

            var pageIndexParam = new SqlParameter { ParameterName = "@PageIndex", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageIndex.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageIndex.HasValue)
                pageIndexParam.Value = DBNull.Value;

            var pageSizeParam = new SqlParameter { ParameterName = "@PageSize", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[aspnet_Membership_FindUsersByName] @ApplicationName, @UserNameToMatch, @PageIndex, @PageSize", applicationNameParam, userNameToMatchParam, pageIndexParam, pageSizeParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // AspnetMembershipFindUsersByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<OMS_HangFire_Counter> OMS_HangFire_Counters { get; set; } // Counter
        public DbSet<OMS_HangFire_Hash> OMS_HangFire_Hashes { get; set; } // Hash
        public DbSet<OMS_HangFire_Job> OMS_HangFire_Jobs { get; set; } // Job
        public DbSet<OMS_HangFire_JobParameter> OMS_HangFire_JobParameters { get; set; } // JobParameter
        public DbSet<OMS_HangFire_JobQueue> OMS_HangFire_JobQueues { get; set; } // JobQueue
        public DbSet<OMS_HangFire_List> OMS_HangFire_Lists { get; set; } // List
        public DbSet<OMS_HangFire_Schema> OMS_HangFire_Schemata { get; set; } // Schema
        public DbSet<OMS_HangFire_Server> OMS_HangFire_Servers { get; set; } // Server
        public DbSet<OMS_HangFire_Set> OMS_HangFire_Sets { get; set; } // Set
        public DbSet<OMS_HangFire_State> OMS_HangFire_States { get; set; } // State

        public FakeMyDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            OMS_HangFire_Counters = new FakeDbSet<OMS_HangFire_Counter>("Key", "Value");
            OMS_HangFire_Hashes = new FakeDbSet<OMS_HangFire_Hash>("Key", "Field");
            OMS_HangFire_Jobs = new FakeDbSet<OMS_HangFire_Job>("Id");
            OMS_HangFire_JobParameters = new FakeDbSet<OMS_HangFire_JobParameter>("JobId", "Name");
            OMS_HangFire_JobQueues = new FakeDbSet<OMS_HangFire_JobQueue>("Queue", "Id");
            OMS_HangFire_Lists = new FakeDbSet<OMS_HangFire_List>("Key", "Id");
            OMS_HangFire_Schemata = new FakeDbSet<OMS_HangFire_Schema>("Version");
            OMS_HangFire_Servers = new FakeDbSet<OMS_HangFire_Server>("Id");
            OMS_HangFire_Sets = new FakeDbSet<OMS_HangFire_Set>("Key", "Value");
            OMS_HangFire_States = new FakeDbSet<OMS_HangFire_State>("JobId", "Id");

        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;

        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }

        private DbContextConfiguration _configuration;

        public DbContextConfiguration Configuration { get { return _configuration; } }

        private Database _database;

        public Database Database { get { return _database; } }

        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        // Stored Procedures

        public int AddPage(string contentName)
        {
            return 0;
        }

        // AddPageAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(int? tablesToCheck)
        {
            int procResult;
            return AspnetAnyDataInTables(tablesToCheck, out procResult);
        }

        public AspnetAnyDataInTablesReturnModel AspnetAnyDataInTables(int? tablesToCheck, out int procResult)
        {
            procResult = 0;
            return new AspnetAnyDataInTablesReturnModel();
        }

        public Task<AspnetAnyDataInTablesReturnModel> AspnetAnyDataInTablesAsync(int? tablesToCheck)
        {
            int procResult;
            return Task.FromResult(AspnetAnyDataInTables(tablesToCheck, out procResult));
        }

        public int AspnetApplicationsCreateApplication(string applicationName, out Guid? applicationId)
        {
            applicationId = default(Guid);
            return 0;
        }

        // AspnetApplicationsCreateApplicationAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetCheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            return 0;
        }

        // AspnetCheckSchemaVersionAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            return 0;
        }

        // AspnetMembershipChangePasswordQuestionAndAnswerAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipCreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, bool? isApproved, DateTime? currentTimeUtc, DateTime? createDate, int? uniqueEmail, int? passwordFormat, out Guid? userId)
        {
            userId = default(Guid);
            return 0;
        }

        // AspnetMembershipCreateUserAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByEmail(string applicationName, string emailToMatch, int? pageIndex, int? pageSize)
        {
            return 0;
        }

        // AspnetMembershipFindUsersByEmailAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int AspnetMembershipFindUsersByName(string applicationName, string userNameToMatch, int? pageIndex, int? pageSize)
        {
            return 0;
        }

        // AspnetMembershipFindUsersByNameAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override Task<TEntity> FindAsync(params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return Activator.CreateInstance<TDerivedEntity>();
        }

        public override ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute(expression));
        }

        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute<TResult>(expression));
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        { }

        public IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }

    }

    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
        {
            return Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Counter
    public class OMS_HangFire_Counter
    {
        public string Key { get; set; } // Key (Primary key) (length: 100)
        public int Value { get; set; } // Value (Primary key)
        public DateTime? ExpireAt { get; set; } // ExpireAt
    }

    // Hash
    public class OMS_HangFire_Hash
    {
        public string Key { get; set; } // Key (Primary key) (length: 100)
        public string Field { get; set; } // Field (Primary key) (length: 100)
        public string Value { get; set; } // Value
        public DateTime? ExpireAt { get; set; } // ExpireAt
    }

    // Job
    public class OMS_HangFire_Job
    {
        public long Id { get; set; } // Id (Primary key)
        public long? StateId { get; set; } // StateId
        public string StateName { get; set; } // StateName (length: 20)
        public string InvocationData { get; set; } // InvocationData
        public string Arguments { get; set; } // Arguments
        public DateTime CreatedAt { get; set; } // CreatedAt
        public DateTime? ExpireAt { get; set; } // ExpireAt

        // Reverse navigation

        /// <summary>
        /// Child OMS_HangFire_JobParameters where [JobParameter].[JobId] point to this entity (FK_HangFire_JobParameter_Job)
        /// </summary>
        public virtual ICollection<OMS_HangFire_JobParameter> OMS_HangFire_JobParameters { get; set; } // JobParameter.FK_HangFire_JobParameter_Job

        /// <summary>
        /// Child OMS_HangFire_States where [State].[JobId] point to this entity (FK_HangFire_State_Job)
        /// </summary>
        public virtual ICollection<OMS_HangFire_State> OMS_HangFire_States { get; set; } // State.FK_HangFire_State_Job

        public OMS_HangFire_Job()
        {
            OMS_HangFire_JobParameters = new List<OMS_HangFire_JobParameter>();
            OMS_HangFire_States = new List<OMS_HangFire_State>();
        }
    }

    // JobParameter
    public class OMS_HangFire_JobParameter
    {
        public long JobId { get; set; } // JobId (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 40)
        public string Value { get; set; } // Value

        // Foreign keys

        /// <summary>
        /// Parent OMS_HangFire_Job pointed by [JobParameter].([JobId]) (FK_HangFire_JobParameter_Job)
        /// </summary>
        public virtual OMS_HangFire_Job OMS_HangFire_Job { get; set; } // FK_HangFire_JobParameter_Job
    }

    // JobQueue
    public class OMS_HangFire_JobQueue
    {
        public int Id { get; set; } // Id (Primary key)
        public long JobId { get; set; } // JobId
        public string Queue { get; set; } // Queue (Primary key) (length: 50)
        public DateTime? FetchedAt { get; set; } // FetchedAt
    }

    // List
    public class OMS_HangFire_List
    {
        public long Id { get; set; } // Id (Primary key)
        public string Key { get; set; } // Key (Primary key) (length: 100)
        public string Value { get; set; } // Value
        public DateTime? ExpireAt { get; set; } // ExpireAt
    }

    // Schema
    public class OMS_HangFire_Schema
    {
        public int Version { get; set; } // Version (Primary key)
    }

    // Server
    public class OMS_HangFire_Server
    {
        public string Id { get; set; } // Id (Primary key) (length: 100)
        public string Data { get; set; } // Data
        public DateTime LastHeartbeat { get; set; } // LastHeartbeat
    }

    // Set
    public class OMS_HangFire_Set
    {
        public string Key { get; set; } // Key (Primary key) (length: 100)
        public double Score { get; set; } // Score
        public string Value { get; set; } // Value (Primary key) (length: 256)
        public DateTime? ExpireAt { get; set; } // ExpireAt
    }

    // State
    public class OMS_HangFire_State
    {
        public long Id { get; set; } // Id (Primary key)
        public long JobId { get; set; } // JobId (Primary key)
        public string Name { get; set; } // Name (length: 20)
        public string Reason { get; set; } // Reason (length: 100)
        public DateTime CreatedAt { get; set; } // CreatedAt
        public string Data { get; set; } // Data

        // Foreign keys

        /// <summary>
        /// Parent OMS_HangFire_Job pointed by [State].([JobId]) (FK_HangFire_State_Job)
        /// </summary>
        public virtual OMS_HangFire_Job OMS_HangFire_Job { get; set; } // FK_HangFire_State_Job
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Counter
    public class OMS_HangFire_CounterConfiguration : EntityTypeConfiguration<OMS_HangFire_Counter>
    {
        public OMS_HangFire_CounterConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_CounterConfiguration(string schema)
        {
            ToTable("Counter", schema);
            HasKey(x => new { x.Key, x.Value });

            Property(x => x.Key).HasColumnName(@"Key").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ExpireAt).HasColumnName(@"ExpireAt").HasColumnType("datetime").IsOptional();
        }
    }

    // Hash
    public class OMS_HangFire_HashConfiguration : EntityTypeConfiguration<OMS_HangFire_Hash>
    {
        public OMS_HangFire_HashConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_HashConfiguration(string schema)
        {
            ToTable("Hash", schema);
            HasKey(x => new { x.Key, x.Field });

            Property(x => x.Key).HasColumnName(@"Key").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Field).HasColumnName(@"Field").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ExpireAt).HasColumnName(@"ExpireAt").HasColumnType("datetime2").IsOptional();
        }
    }

    // Job
    public class OMS_HangFire_JobConfiguration : EntityTypeConfiguration<OMS_HangFire_Job>
    {
        public OMS_HangFire_JobConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_JobConfiguration(string schema)
        {
            ToTable("Job", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.StateId).HasColumnName(@"StateId").HasColumnType("bigint").IsOptional();
            Property(x => x.StateName).HasColumnName(@"StateName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.InvocationData).HasColumnName(@"InvocationData").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.Arguments).HasColumnName(@"Arguments").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType("datetime").IsRequired();
            Property(x => x.ExpireAt).HasColumnName(@"ExpireAt").HasColumnType("datetime").IsOptional();
        }
    }

    // JobParameter
    public class OMS_HangFire_JobParameterConfiguration : EntityTypeConfiguration<OMS_HangFire_JobParameter>
    {
        public OMS_HangFire_JobParameterConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_JobParameterConfiguration(string schema)
        {
            ToTable("JobParameter", schema);
            HasKey(x => new { x.JobId, x.Name });

            Property(x => x.JobId).HasColumnName(@"JobId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(40).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasRequired(a => a.OMS_HangFire_Job).WithMany(b => b.OMS_HangFire_JobParameters).HasForeignKey(c => c.JobId); // FK_HangFire_JobParameter_Job
        }
    }

    // JobQueue
    public class OMS_HangFire_JobQueueConfiguration : EntityTypeConfiguration<OMS_HangFire_JobQueue>
    {
        public OMS_HangFire_JobQueueConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_JobQueueConfiguration(string schema)
        {
            ToTable("JobQueue", schema);
            HasKey(x => new { x.Queue, x.Id });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.JobId).HasColumnName(@"JobId").HasColumnType("bigint").IsRequired();
            Property(x => x.Queue).HasColumnName(@"Queue").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.FetchedAt).HasColumnName(@"FetchedAt").HasColumnType("datetime").IsOptional();
        }
    }

    // List
    public class OMS_HangFire_ListConfiguration : EntityTypeConfiguration<OMS_HangFire_List>
    {
        public OMS_HangFire_ListConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_ListConfiguration(string schema)
        {
            ToTable("List", schema);
            HasKey(x => new { x.Key, x.Id });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Key).HasColumnName(@"Key").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ExpireAt).HasColumnName(@"ExpireAt").HasColumnType("datetime").IsOptional();
        }
    }

    // Schema
    public class OMS_HangFire_SchemaConfiguration : EntityTypeConfiguration<OMS_HangFire_Schema>
    {
        public OMS_HangFire_SchemaConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_SchemaConfiguration(string schema)
        {
            ToTable("Schema", schema);
            HasKey(x => x.Version);

            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // Server
    public class OMS_HangFire_ServerConfiguration : EntityTypeConfiguration<OMS_HangFire_Server>
    {
        public OMS_HangFire_ServerConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_ServerConfiguration(string schema)
        {
            ToTable("Server", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Data).HasColumnName(@"Data").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastHeartbeat).HasColumnName(@"LastHeartbeat").HasColumnType("datetime").IsRequired();
        }
    }

    // Set
    public class OMS_HangFire_SetConfiguration : EntityTypeConfiguration<OMS_HangFire_Set>
    {
        public OMS_HangFire_SetConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_SetConfiguration(string schema)
        {
            ToTable("Set", schema);
            HasKey(x => new { x.Key, x.Value });

            Property(x => x.Key).HasColumnName(@"Key").HasColumnType("nvarchar").IsRequired().HasMaxLength(100).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Score).HasColumnName(@"Score").HasColumnType("float").IsRequired();
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar").IsRequired().HasMaxLength(256).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ExpireAt).HasColumnName(@"ExpireAt").HasColumnType("datetime").IsOptional();
        }
    }

    // State
    public class OMS_HangFire_StateConfiguration : EntityTypeConfiguration<OMS_HangFire_State>
    {
        public OMS_HangFire_StateConfiguration()
            : this("OMS_HangFire")
        {
        }

        public OMS_HangFire_StateConfiguration(string schema)
        {
            ToTable("State", schema);
            HasKey(x => new { x.JobId, x.Id });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.JobId).HasColumnName(@"JobId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.CreatedAt).HasColumnName(@"CreatedAt").HasColumnType("datetime").IsRequired();
            Property(x => x.Data).HasColumnName(@"Data").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasRequired(a => a.OMS_HangFire_Job).WithMany(b => b.OMS_HangFire_States).HasForeignKey(c => c.JobId); // FK_HangFire_State_Job
        }
    }


    #endregion

    #region Stored procedure return models

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class AcCfnSplitReturnModel
    {
        public string TableVar { get; set; }
    }

    public class AspnetAnyDataInTablesReturnModel
    {
        public class ResultSetModel1
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel1> ResultSet1;
        public class ResultSetModel2
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel2> ResultSet2;
        public class ResultSetModel3
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel3> ResultSet3;
        public class ResultSetModel4
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel4> ResultSet4;
        public class ResultSetModel5
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel5> ResultSet5;
        public class ResultSetModel6
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel6> ResultSet6;
        public class ResultSetModel7
        {
            public string Column1 { get; set; }
        }
        public List<ResultSetModel7> ResultSet7;
    }


    #endregion

}
// </auto-generated>
